package db

import (
	"context"
	"database/sql"
	"fmt"
)

// Store provides all functions to execute db queries and transactions
// For individual queries, we already have the Queries struct in db.go (generated by sqlc)
// each query does 1 operation per table so it doesnt support transactions (COMMIT/ROLLBACK)
// This file will extend its functionality to support Transactions
// by embedding it in the store struct (This is called composition)
// It is the preferred way to extend struct functionality in goLang instead of inheritance
type Store struct {
	*Queries // all individual Query functions provided by `Queries` is available to Store struct
	db       *sql.DB
}

// TransferTxParams contains the input parameters of the transfer transaction
type TransferTxParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	Amount        int64 `json:"amount"`
}

// TransferTxResult is the result of the transfer transaction
type TransferTxResult struct {
	Transfer    Transfer `json:"transfer"`
	FromAccount Account  `json:"from_account"`
	ToAccount   Account  `json:"to_account"`
	FromEntry   Entry    `json:"from_entry"`
	ToEntry     Entry    `json:"to_entry"`
}

func NewStore(db *sql.DB) *Store {
	return &Store{
		db:      db,
		Queries: New(db), // New was generated by sqlc (creates and returns Queries obj)
	}
}

// execTx executes a function within a database transaction
// starts with lower case e (unexported) because we do not want external packages to call it directly.
// instead, we'll provide an exported function for each specific transaction
func (store *Store) execTx(ctx context.Context, fn func(*Queries) error) error {

	tx, err := store.db.BeginTx(ctx, nil) // &sql.TxOptions{} lets you set isolation level and read only property

	if err != nil {
		return err
	}

	q := New(tx) // this works cuz New accepts Db.tx interface
	err = fn(q)

	if err != nil {
		if rbErr := tx.Rollback(); rbErr != nil {
			//if rollback fails
			return fmt.Errorf("tx err: %v, rb error : %v", err, rbErr) // output and return the original err + rollback err
		}
		return err // if rollback successful , return original tx error
	}
	return tx.Commit()
}

func (store *Store) TransferTx(ctx context.Context, arg TransferTxParams) (TransferTxResult, error) {
	var result TransferTxResult // create empty result

	err := store.execTx(ctx, func(q *Queries) error {
		var err error

		result.Transfer, err = q.CreateTransfer(ctx, CreateTransferParams{
			FromAccountID: arg.FromAccountID,
			ToAccountID:   arg.ToAccountID,
			Amount:        arg.Amount,
		})
		if err != nil {
			return err
		}

		result.FromEntry, err = q.CreateEntry(ctx, CreateEntryParams{
			AccountID: arg.FromAccountID,
			Amount:    -arg.Amount,
		})
		if err != nil {
			return err
		}

		result.ToEntry, err = q.CreateEntry(ctx, CreateEntryParams{
			AccountID: arg.ToAccountID,
			Amount:    arg.Amount,
		})
		if err != nil {
			return err
		}

		// TODO: Update accounts balances (handle Deadlock)

		return nil
	})

	return result, err
}
