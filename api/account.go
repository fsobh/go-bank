package api

import (
	db "github.com/fsobh/simplebank/db/sqlc"
	"github.com/gin-gonic/gin"
	"net/http"
)

// binding:"required" is used for validation. Gin offers a validator to validate incoming data
// oneof=USD EUR is also used for validation. Tells gin that the value has to be one of the listed
// 3
type createAccountRequest struct {
	Owner    string `json:"owner" binding:"required"`
	Currency string `json:"currency" binding:"required,oneof=USD EUR"`
}

// Note : Every handler function in Gin takes in a Context object as an argument 4
func (server *Server) createAccount(ctx *gin.Context) {

	var req createAccountRequest

	// We validate the input json with what we said we'd expect in the struct (using the context)
	if err := ctx.ShouldBindJSON(&req); err != nil {
		//If the validation fails, return a 400 error code
		ctx.JSON(http.StatusBadRequest, errorResponse(err))
		return
	}

	//we declare our database arguments and plug the request params to it
	arg := db.CreateAccountParams{
		Owner:    req.Owner,
		Currency: req.Currency,
		Balance:  0,
	}

	//we call our database store's Create Account function (generated by sqlc)
	account, err := server.store.CreateAccount(ctx, arg)

	// make sure there's no errors
	if err != nil {
		ctx.JSON(http.StatusBadRequest, errorResponse(err))
		return
	}

	// return 200 status and the new account that was created
	ctx.JSON(http.StatusOK, account)

}
